//establish variables for the macro
var start, channels, flat, culture, title, newTitle, title2, imagedir, imagedir2, collect, length;
var bluedir, reddir, greendir, repeat, measure1, blind, row, blind1, blind2;
var redpunctadir, greenpunctadir;
var greenThreshold, redThreshold, areapercent, scale, minsize, maxsize, name, gcount, rcount, grcount, rgcount, axonlength, axonflag;
var greenstring, redstring;
//select the parameters for image proccessing

Dialog.create("Image Quant");
    Dialog.addMessage("Heads up - this macro is set up for \nimages with the color channel order \ngreen, red, blue, and then cerulean if it's there. \nYou will need to either adjust the macro \nor your image to fit.");
    items = newArray("Start", "Dendrites", "ROI Selection", "Thresholding", "Puncta", "Quantification");
    Dialog.addRadioButtonGroup("Start at?", items, 6, 1, "Start");
    items = newArray("Three", "Four");
    Dialog.addRadioButtonGroup("#Channels", items, 1, 2, "Three");
    items = newArray("Flat Tiff", "Color Stack Tiff");
    Dialog.addRadioButtonGroup("Flat?", items, 2, 1, "Flat Tiff");
    items = newArray("Co-culture", "Neuron Culture");
    Dialog.addRadioButtonGroup("Culture Type?", items, 2, 1, "Neuron Culture");
Dialog.show;
//translate parameters to variables
start = Dialog.getRadioButton;
channels = Dialog.getRadioButton;
flat = Dialog.getRadioButton;
culture = Dialog.getRadioButton;
//for record keeping
print("Where to start: "+start);
print("How Many Channels: "+channels);
print("Flat or Stack: "+flat);
print("What type of culture: "+culture);
print("-------------------------------------------------------");
//confirm parameters
waitForUser("Are these correct? "+start+", "+channels+", "+flat+", and "+culture);
//start function from beginning of process
//only the .lif file to images and subsequent ROI
if(start == "Start") 
	
	{
	if (channels == "Three")
		{
		if (flat == "Flat Tiff")
			{
			open();
			StackToTiffThreeFlat();
			}
		}		
	if (channels == "Four")
		{
		if (culture == "Neuron Culture")
			{
			open();
			StackToTiffFourFlat();
			}
		if (culture == "Co-culture")
			{
			open();
			StackToTiffFourStack();
			}
		}
	}
if (start == "Start")
	{
	if (channels == "Four");
		{
			if (culture == "Co-culture")
			{
			waitForUser("Open images");
			ROIselect();
			PunctaCounter();
			}
	else
		{
		waitForUser("Open images to get dendrites from");
		DendriteSelect();
		start = "reset";
		waitForUser("Open controls to threshold");
		SplitChannel();
		waitForUser("organize dendrites into the necessary folders");
		Quantify();
		}
	}
//start from a specific point in the analysis
//especially useful for fuckups

if (start == "Dendrites")
	{
	waitForUser("Open images to quantify");
	DendriteSelect();
	start = "reset";
	waitForUser("Open controls to threshold");
	SplitChannel();
	waitForUser("organize dendrites into the necessary folders");
	Quantify();
	}
if (start == "ROI Selection")
	{
	waitForUser("Open images to quantify");
	ROIselect();
	start = "reset";
	PunctaCounter();
	}
if (start == "Thresholding")
	{
	waitForUser("Open controls to threshold");
	SplitChannel();
	start = "reset";
	waitForUser("organize dendrites into the necessary folders");
	Quantify();
	}

if (start == "Puncta")
	{
	waitForUser("Open images to quantify");
	PunctaCounter();
	start = "reset";	
	}
if (start == "Quantification")
	{
	Quantify();
	start = "reset";
	}

//these are the functions referenced in the script
//each should be pretty self explanatory (though the ones under "Quantify();
//were not mine and I adapted them to this script.
//~weeks~ of headaches after I touched that code.

function StackToTiffThreeFlat()
	{
	imagedir=getDirectory("Choose folder to save images in");
	for (i = nImages; i > 0; i--) 
		{
		selectImage(i);
		title=getTitle();
		Dialog.create("Title");
			Dialog.addMessage("Rename");
			Dialog.addString("", title,50);
			Dialog.show();
		newTitle = Dialog.getString();
		rename(newTitle);
		title=getTitle();
		selectWindow(title);
		Stack.setChannel(1);
		run("Green");
		Stack.setChannel(2);
		run("Red");
		Stack.setChannel(3);
		run("Blue");
		rename("close_me");
		run("Z Project...", "projection=[Max Intensity]");
		selectWindow("close_me");
		close();
		selectWindow("MAX_close_me");
		run("Stack to RGB");
		saveAs("Tiff", imagedir+title);
		close();
		selectWindow("MAX_close_me");
		close();
		}
	}
	
function StackToTiffFourFlat()
	{
	imagedir=getDirectory("Choose folder to save images in");
	imagedir2=getDirectory("Choose folder to save tif images in");
	for (i = nImages; i > 0; i--) {
		selectImage(i);
		title=getTitle();
		Dialog.create("Title");
			Dialog.addMessage("Rename");
			Dialog.addString("", title,50);
			Dialog.show();
		newTitle = Dialog.getString();
		rename(newTitle);
		title=getTitle();
		selectWindow(title);
		rename("close_me");
		run("Z Project...", "projection=[Max Intensity]");
		saveAs("Tiff", imagedir2+title+"_stack");
		title2=getTitle();
		selectWindow(title2);
		rename("MAX_close_me");
		Stack.setChannel(4);
		run("Delete Slice");
		run("Stack to RGB");
		run("Properties...", "channels=1 slices=1 frames=1 unit=micron pixel_width=0.1705109 pixel_height=0.1705109 voxel_depth=1");
		saveAs("Tiff", imagedir+title);
		close();
		selectWindow("close_me");
		close();
		selectWindow("MAX_close_me");
		close();
		}
	}

function StackToTiffFourStack()
	{
	imagedir=getDirectory("Choose folder to save images in");
	for (i = nImages; i > 0; i--) {
		selectImage(i);
		title=getTitle();
		Dialog.create("Title");
			Dialog.addMessage("Rename");
			Dialog.addString("", title,50);
			Dialog.show();
		newTitle = Dialog.getString();
		rename(newTitle);
		title=getTitle();
		selectWindow(title);
		rename("close_me");
		run("Z Project...", "projection=[Max Intensity]");
		Stack.setChannel(1);
		run("Cyan");
		Stack.setChannel(2);
		run("Blue");
		Stack.setChannel(3);
		run("Green");
		Stack.setChannel(4);
		run("Red");
		saveAs("Tiff", imagedir+title);
		close();
		selectWindow("close_me");
		close();
		}
	}	

function DendriteSelect()
	{
	imgdir=getDirectory("Choose folder to save dendrites in");
	for (i = nImages; i > 0; i--) {
		selectImage(i);
		Dialog.create("Are there Usable dendrites?");
			Dialog.addString("","yes or no",30);
			Dialog.show();
		collect = Dialog.getString();	
		if (collect == "yes") {
			run("In [+]");
			run("In [+]");
			run("In [+]");
			//modify the name
			title=getTitle();
			Dialog.create("Title");
				Dialog.addMessage("Rename");
				Dialog.addString("",title,50);
				Dialog.show();
			newTitle = Dialog.getString();
			rename(newTitle);
			title=getTitle();
			selectWindow(title);
			//select dendrite
			setTool("polygon");
			waitForUser ("Select dendrite then hit OK");
			run("Copy");
			run("Internal Clipboard");
			setTool("polyline");
			waitForUser ("Measure dendrite length");
			run("Clear Results");
			run("Measure");
			length = getResult("Length",0);
			print(title+ "-1 "+length);	
			setTool("polygon");
			waitForUser ("Select dendrite then hit OK");
			run("Copy");
			run("Internal Clipboard");
			setTool("polyline");
			waitForUser ("Measure dendrite length");
			run("Clear Results");
			run("Measure");
			length = getResult("Length",0);
			print(title+ "-2 "+length);	
			selectWindow("Clipboard-1");
			saveAs("Tiff", imgdir+title+"-2");
			close();
			selectWindow("Clipboard");
			saveAs("Tiff", imgdir+title+"-1");
			close();
			selectWindow(title);
			close();
			collect = "reset";
		} else {
			close();
			}
		}
	}

function ROIselect()
	{
	bluedir = getDirectory("Choose folder to save blue/cerulean channels in");
	reddir = getDirectory("Choose folder to save red channel in");
	greendir = getDirectory("Choose folder to save green channel in");
	selectImage(nImages);
	title = getTitle();
	for (i = nImages; i > 0; i--) 
		{
		selectImage(i);
		run("Channels Tool...");
		//enhances the cerulean channel to better see HEK areas
		Stack.setChannel(1);
		run("Enhance Contrast...", "saturated=0.1");
		waitForUser("Confirm live HEK");
		//creates a loop for multiple HEK in one image
		Dialog.create("Repeat?");
			Dialog.addMessage("Do you have another HEK in frame?");
			//if you answer "yes" in lowercase it will continue, if
			//anything else it will close the image and continue to the next one
			Dialog.addString("", "yes or no",40);
			Dialog.show();
		repeat = Dialog.getString();
		while (repeat == "yes") 
			{
			run("View 100%");
			title = getTitle();
			//this is the function, see the bottom of the macro
			copyChannels();
			Dialog.create("Repeat?");
				Dialog.addMessage("Do you have another HEK in frame?");
				Dialog.addString("", "yes or no",30);
				Dialog.show();
			repeat = Dialog.getString();
		}
		if(repeat != "yes") 
			{
			close();
			}
		}
	waitForUser("Open unblinded red ROI");
	blinding();
	waitForUser("copy the blinding key over");
	
	waitForUser("Open unblinded green ROI");
	blinding();
	waitForUser("copy the blinding key over");
	}
	
function copyChannels()
	{
	run("Channels Tool...");
	//turns off all channels but channel 4
	Stack.setActiveChannels("1100");
	Stack.setChannel(4);
	setTool("polygon");
	run("In [+]");
	run("In [+]");
	run("In [+]");
	//modify the name
	title=getTitle();
	Dialog.create("Title");
		Dialog.addMessage("Rename for HEK ROI number");
		Dialog.addString("", title,50);
		Dialog.show();
	newTitle = Dialog.getString();
	rename(newTitle);
	title=getTitle();
	selectWindow(title);
	//select HEK ROI
	waitForUser ("Select HEK ROI then hit OK");
	run("Clear Results");
	run("Measure");
	measure1 = getResult("Area",0);
	print(title + " " + measure1);
	selectWindow(title);
	//green
	Stack.setChannel(3);
	run("Green");
	run("Copy");
	run("Internal Clipboard");
	selectWindow(title);
	//red
	Stack.setChannel(4);
	run("Red");
	run("Copy");
	run("Internal Clipboard");
	selectWindow(title);
	Stack.setChannel(2);
	//blue
	run("Blue");
	run("Copy");
	run("Internal Clipboard");
	selectWindow(title);
	Stack.setChannel(1);
	//cerulean
	run("Cyan");
	run("Copy");
	run("Internal Clipboard");
	selectWindow(title);
	selectWindow("Clipboard-3");
	saveAs("Tiff", bluedir+title+"_cerulean");
	close();
	selectWindow("Clipboard-2");
	saveAs("Tiff", bluedir+title+"_blue");
	close();
	selectWindow("Clipboard-1");
	saveAs("Tiff", reddir+title+"_red");
	close();
	selectWindow("Clipboard");
	saveAs("Tiff", greendir+title+"_green");
	close();
	selectWindow(title);
	run("View 100%");
}

function blinding()
	{
	imageblind=getDirectory("select blinded image folder");
	row=0;
	for ( i = nImages; i >0; i--) 
		{
		selectImage(nImages);
		title = getTitle();
		numbah = random();
		moNumbah = random();
		blind = (numbah^2)/moNumbah;
		blind1 = d2s(numbah,9);
		rename(blind1);
		run("Set Measurements...", "area perimeter area_fraction limit redirect=None decimal=9");
		saveAs("Tiff", imageblind+blind);
		blind2 = getTitle();
		print(title + " " + blind2);
		selectImage(blind2);
		row=row+1;
		close();
		}
	}

function PunctaCounter()
	{
	waitForUser("Open blinded red ROI");
	redpunctadir = getDirectory("Choose folder to save puncta for red channel in");
	for (i = nImages; i > 0; i--) 
		{
		selectImage(i);
		title = getTitle();
		Dialog.create("Title");
			//rename the image to better categorize it
			Dialog.addMessage("Rename to get rid of .tif");
			Dialog.addString("", title,50);
			Dialog.show();
		newTitle = Dialog.getString();
		rename(newTitle);
		title=getTitle();
		selectWindow(title);
		run("Grays");
		run("Invert");
		run("Point Tool...", "type=Circle color=Magenta size=Medium label=0 counter=0");
		setTool("multipoint");
		run("In [+]");
		run("In [+]");
		run("In [+]");
		waitForUser("Select Puncta then hit ok");
		run("Clear Results");
		run("Measure");
		print(title + " " + nResults);
		selectImage(i);
		saveAs("Tiff", redpunctadir+title+"_puncta");
		close();
		}
	waitForUser("Open blinded green ROI");
	greenpunctadir = getDirectory("Choose folder to save puncta for green channel in");
	for (i = nImages; i > 0; i--) 
		{
		selectImage(i);
		title = getTitle();
		Dialog.create("Title");
			//rename the image to better categorize it
			Dialog.addMessage("Rename to get rid of .tif");
			Dialog.addString("", title,50);
			Dialog.show();
		newTitle = Dialog.getString();
		rename(newTitle);
		title=getTitle();
		selectWindow(title);
		run("Grays");
		run("Invert");
		run("Point Tool...", "type=Circle color=Magenta size=Medium label=0 counter=0");
		setTool("multipoint");
		run("In [+]");
		run("In [+]");
		run("In [+]");
		waitForUser("Select Puncta then hit ok");
		run("Clear Results");
		run("Measure");
		print(title + " " + nResults);
		selectImage(i);
		saveAs("Tiff", greenpunctadir+title+"_puncta");
		close();			
		}
	}

function SplitChannel() 
	{
	for (i = nImages; i > 0; i--) 
		{
		selectImage(i);
		title = getTitle();
		run("Split Channels");
		close();
		run("In [+]");
		run("In [+]");
		run("In [+]");
		run("Invert");
		setAutoThreshold("Default");
		run("Threshold...");
		waitForUser("set and record threshold");
		selectImage(title+" (green)");
		close();
		run("In [+]");
		run("In [+]");
		run("In [+]");
		run("Invert");
		run("Threshold...");
		waitForUser("set and record threshold");
		close();
		}

function Quantify()
	{
	run("Colors...", "foreground=white background=black selection=yellow");
	run("Options...", "iterations=1 count=1 black edm=Overwrite");
	run("Set Measurements...", "area perimeter area_fraction limit redirect=None decimal=3");

	rawdir=getDirectory("Choose Raw Data Folder");
	resultdir=getDirectory("Choose Result Folder");
	axondir=getDirectory("Choose AxonShow Folder");

	parameterinput();

	print("Raw_Folder:	"+rawdir);
	print("Result_Folder:	"+resultdir);
	print("GreenThreshold	RedThreshold	AreaPercent(%)	PixelScale(um/pixel)	Min_Puncta_Size	Max_Puncta_Size");
	print(greenThreshold+"	"+redThreshold+"	"+areapercent+"	"+scale+"	"+minsize+"	"+maxsize);
	print(" 	GreenPuncta#	RedPuncta#	GR#	RG#	AxonLength(um)	Density_R(um/#)	Density_G(um/#)");
	
	folderlist=getFileList(rawdir);
	for(d=0;d<folderlist.length;d++)
 		{
  		//create corresponding subfolder in result folder
  		exec("cmd", "/c", "mkdir", resultdir+folderlist[d]);
  		//create greenarea and redarea subfolder
  		//exec("cmd", "/c", "mkdir", resultdir+folderlist[d]+"greenarea/");
  		//exec("cmd", "/c", "mkdir", resultdir+folderlist[d]+"redarea/");
  
  		filelist=getFileList(rawdir+folderlist[d]);
 		print(folderlist[d]);
  		greenstring="Filename	#	Area	Perim	%Area\n";
  		redstring="Filename	#	Area	Perim	%Area\n";
  
  		for(f=0;f<filelist.length;f++)
  	 		{
   			// initialize :  open file, split channel, name by "red"/"green"/"axon"
   			initialize();
    		// create green red mask images and roi files
   			mask("green"); 
    		mask("red");
   			// mask axon, and get length;
   			axon();
  	  		//measure
    		measure();	
   			}

		tmpname=substring(folderlist[d], 0, lengthOf(folderlist[d])-1);
  		File.saveString(greenstring, resultdir+folderlist[d]+tmpname+"_GreenArea.xls"); 
 		File.saveString(redstring, resultdir+folderlist[d]+tmpname+"_RedArea.xls");  	
 		}

	selectWindow("Log");
	saveAs("Text", resultdir+"Summary.xls");
	selectWindow("Log"); run("Close");
	selectWindow("Results"); run("Close");
	selectWindow("ROI Manager"); run("Close");
	}

function measure()
	{
	if( gcount > 0 ) 
		{
		roiManager("Open", resultdir+folderlist[d]+name+"_green_ROI.zip");
		selectImage("red mask");
		run("Clear Results");
		roiManager("Measure");
		grcount=0;
		}
	for(i=0;i<roiManager("Count");i++)
		{
		if( getResult("%Area",i) >= areapercent ) grcount++;
		roiManager("reset"); run("Clear Results");
		}
	if( rcount > 0 ) 
		{
		roiManager("Open", resultdir+folderlist[d]+name+"_red_ROI.zip");
		selectImage("green mask");
		run("Clear Results");
		roiManager("Measure");
		rgcount=0;
		}
	for(i=0;i<roiManager("Count");i++)
		{
		if( getResult("%Area",i) >= areapercent ) 
			{
			rgcount++;
			roiManager("reset"); run("Clear Results");
			//print(" 	GreenPuncta#	RedPuncta#	GR#	RG#	AxonLength(um)	Density_R(um/#)	Density_G(um/#)");
			print(filelist[f]+"	"+gcount+"	"+rcount+"	"+grcount+"	"+rgcount+"	"+axonlength+"	"+axonlength/rcount+"	"+axonlength/gcount);
			}
		}
	run("Close All"); 
	}

function mask(channel)
	{
	selectImage(channel);
	run("Gaussian Blur...", "sigma=1");
	if( channel == "green")
		{
		setThreshold(greenThreshold, 255);
		}
	if( channel == "red")
		{
		setThreshold(redThreshold, 255);  
		}
      
	run("Find Maxima...", "noise=10 output=[Segmented Particles] above");
	run("Analyze Particles...", "size="+minsize+"-"+maxsize+" pixel show=Masks add");
	selectWindow("Mask of "+channel+" Segmented");  
	run("Grays");
	saveAs("Tiff", resultdir+folderlist[d]+name+"_"+channel+"_mask.tif");
	run("Clear Results");
	roiManager("Measure");
	selectWindow("Results");
  
	if( channel == "green")
		{
		for(j=0;j<nResults;j++)
		greenstring=greenstring+filelist[f]+"	"+j+1+"	"+getResult("Area",j)+"	"+getResult("Perim.",j)+" 	"+getResult("%Area",j)+"\n";
		}
    
	if( channel == "red")
		{
    	for(j=0;j<nResults;j++)
      	redstring=redstring+filelist[f]+"	"+j+1+"	"+getResult("Area",j)+"	"+getResult("Perim.",j)+"	"+getResult("%Area",j)+"\n";;
		}
	run("Clear Results");
	rename(channel+" mask");
	selectImage(channel); close();
	selectImage(channel+" Segmented"); close();

	if( channel == "green" )  gcount = roiManager("Count");
	if( channel == "red" )  rcount = roiManager("Count");
  	if( roiManager("Count") > 0 )
		roiManager("Save", resultdir+folderlist[d]+name+"_"+channel+"_ROI.zip");
		roiManager("reset");
  
 	}
}
function axon()
	{
	selectImage("axon");
	run("Subtract Background...", "rolling=10");
	run("Gaussian Blur...", "sigma=3");
	setAutoThreshold("Triangle dark");
	setOption("BlackBackground", true);
	run("Convert to Mask");
	run("Skeletonize");
	run("Analyze Particles...", "size=25-infinity pixel show=Nothing add");
	axonlength=0;
	if( roiManager("Count") > 0 )
		{
		roiManager("Save", resultdir+folderlist[d]+name+"_axon.zip");
		run("Clear Results");
		roiManager("Measure");
		for(i=0; i< roiManager("Count"); i++)
			{
			axonlength= axonlength + getResult("Perim.",0) ;
			axonlength = axonlength/2;
			open(rawdir+folderlist[d]+filelist[f]);
			roiManager("Show All");
			run("Flatten");
			tmp= substring(folderlist[d], 0 , lengthOf(folderlist[d])-1 );
			saveAs("Jpeg", axondir+tmp+"_"+name+"_show.jpg");
			close(); close();
			}

		roiManager("reset"); 
		run("Clear Results");
		}

function initialize()
	{
	open(rawdir+folderlist[d]+filelist[f]);
	name=getInfo("image.filename");
	run("Properties...", "channels=1 slices=1 frames=1 unit=um pixel_width="+scale+" pixel_height=0.1705 voxel_depth=1");
	run("Split Channels");
	rename("axon");
	selectImage(name+" (green)"); rename("green");
	selectImage(name+" (red)"); rename("red");
	}
 	

function parameterinput()
	{
	Dialog.create("Parameter");
		Dialog.addNumber("Green Threshold:", 30);
		Dialog.addNumber("Red Threshold:", 30);
		Dialog.addNumber("Area Percent (%):", 25);
		Dialog.addNumber("Pixel Scale (um/pixel):", 0.1705);
		Dialog.addNumber("Min Punta Size (pixel):", 1);
		Dialog.addNumber("Max Punta Size (pixel):", 60);
	Dialog.show();
	greenThreshold = Dialog.getNumber();
	redThreshold = Dialog.getNumber();
	areapercent = Dialog.getNumber();  
	scale = Dialog.getNumber();  
	minsize = Dialog.getNumber();  
	maxsize = Dialog.getNumber();  
	}
