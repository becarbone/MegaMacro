//establish variables for the macro
var start, channels, title, newTitle, title2, imagedir, imagedir2, collect, length, numbah, moNumbah;
var bluedir, reddir, greendir, repeat, measure1, blind, row, blind1, blind2, ROIdir, blindedlist1, blindedlist2;
var punctadir2, punctadir1, img, controldir, blinddir1, blindlist1, blinddir2, blindlist2, imageblind1, imageblind2;
var greenThreshold, redThreshold, areapercent, scale, minsize, maxsize, name, gcount, rcount, grcount, rgcount;
var greenstring, redstring, result, filetype, axonlength, axonflag;
var channel1, channel2, channel3, channel4, colors;

//select the parameters for image proccessing
Dialog.create("Image Quant");
    items = newArray("Three channel neuron culture", "Four channel co-culture", "Four channel neuron culture");
    Dialog.addRadioButtonGroup("Culture Type", items, 3, 1, "Three channel neuron culture");
    items = newArray("Start", "Start", "Dendrites","ROI Selection", "Thresholding", "Puncta", "Quantification");
    Dialog.addRadioButtonGroup("Start at?", items, 4, 2, "Start");
Dialog.show;
//translate parameters to variables
culture = Dialog.getRadioButton();
start = Dialog.getRadioButton();
if (culture != "Three channel neuron culture"){
	Dialog.create("Image Quant");
		colors = newArray("None","Green", "Red", "Blue", "Cyan");
		Dialog.setInsets(20,18,2);
		Dialog.addChoice("Channel 1",colors);
		Dialog.setInsets(2,18,2);
		Dialog.addChoice("Channel 2",colors);
		Dialog.setInsets(2,18,2);
		Dialog.addChoice("Channel 3",colors);
		Dialog.setInsets(2,18,5);
		Dialog.addChoice("Channel 4",colors);
	Dialog.show;
	channel1 = Dialog.getChoice();
	channel2 = Dialog.getChoice();
	channel3 = Dialog.getChoice();
	channel4 = Dialog.getChoice();
	}
	else {
		Dialog.create("Image Quant");
			colors = newArray("None","Green", "Red", "Blue", "Cyan");
			Dialog.setInsets(20,18,2);
			Dialog.addChoice("Channel 1",colors);
			Dialog.setInsets(2,18,2);
			Dialog.addChoice("Channel 2",colors);
			Dialog.setInsets(2,18,2);
			Dialog.addChoice("Channel 3",colors);
		Dialog.show;
		channel1 = Dialog.getChoice();
		channel2 = Dialog.getChoice();
		channel3 = Dialog.getChoice();
		channel4 = "";
	}
//for record keeping
print("Where to start: "+start);
print("What kind of analysis: "+culture);
print("Channels: "+channel1+" "+channel2+" "+channel3+" "+channel4);
print("-------------------------------------------------------");
//confirm parameters
waitForUser("Are these correct? "+start+" and "+culture);
//start function from beginning of process
//only the .lif file to images and subsequent ROI
if (culture == "Three channel neuron culture") 
	{
	//code for normal neuron culture analysis starts here
	channels = "Three";
	imagedir = getDirectory("Choose folder to save images in");
	rawdir = getDirectory("Choose folder to save the raw data in");
	while (start == "Start")
		{
		open();
		StackToTiff();
		start = "Dendrites";
		}
	while (start == "Dendrites")
		{
		imgList = getFileList(imagedir);
		for(i=0;i<imgList.length;i++)
			{
			img = imgList[i];
			print(img);
			open(imagedir+img);
			run("Properties...", "channels=1 slices=1 frames=1 unit=um pixel_width=0.1705 pixel_height=0.1705 voxel_depth=1");
			DendriteSelect();
			}
		start = "Thresholding";
		}
	controldir = getDirectory("Folder with controls for thresholding");
	controlList = getFileList(controldir);
	while (start == "Thresholding")
		{
		for(i=0;i<controlList.length;i++)
			{
			img = controlList[i];
			open(controldir+img);
			run("Properties...", "channels=1 slices=1 frames=1 unit=um pixel_width=0.1705 pixel_height=0.1705 voxel_depth=1");
			SplitChannel();
			}
		start = "Quantification";
		}
	while (start == "Quantification")
		{
		run("Colors...", "foreground=white background=black selection=yellow");
		run("Options...", "iterations=1 count=1 black edm=Overwrite");
		run("Set Measurements...", "area perimeter area_fraction limit redirect=None decimal=3");
	
		//references rawdir, which is defined earlier and automated
		resultdir=getDirectory("Choose Result Folder");
		axondir=getDirectory("Choose AxonShow Folder");	
		
		//input the thresholds, %area, scale, and dimensions
		parameterinput();
		print("Raw_Folder:	"+rawdir);
		print("Result_Folder:	"+resultdir);
		print("GreenThreshold	RedThreshold	AreaPercent(%)	PixelScale(um/pixel)	Min_Puncta_Size	Max_Puncta_Size");
		print(greenThreshold+"	"+redThreshold+"	"+areapercent+"	"+scale+"	"+minsize+"	"+maxsize);
		print(" 	GreenPuncta#	RedPuncta#	GR#	RG#	AxonLength(um)	Density_R(um/#)	Density_G(um/#)");
		
		folderlist=getFileList(rawdir);
		for(d=0;d<folderlist.length;d++)
 			{
  			//create corresponding subfolder in result folder
  			exec("cmd", "/c", "mkdir", resultdir+folderlist[d]);
  			//create greenarea and redarea subfolder
  			//exec("cmd", "/c", "mkdir", resultdir+folderlist[d]+"greenarea/");
  			//exec("cmd", "/c", "mkdir", resultdir+folderlist[d]+"redarea/");
 	 
  			filelist=getFileList(rawdir+folderlist[d]);
 			print(folderlist[d]);
  			greenstring="Filename	#	Area	Perim	%Area\n";
  			redstring="Filename	#	Area	Perim	%Area\n";
 	 
  			for(f=0;f<filelist.length;f++)
  		 		{
   				// initialize :  open file, split channel, name by "red"/"green"/"axon"
   				initialize();
   		 		// create green red mask images and roi files
   				mask("green"); 
   		 		mask("red");
   				// mask axon, and get length;
   				axon();
  	  			//measure
    			measure();	
				}	

			tmpname=substring(folderlist[d], 0, lengthOf(folderlist[d])-1);
			File.saveString(greenstring, resultdir+folderlist[d]+tmpname+"_GreenArea.xls"); 
			File.saveString(redstring, resultdir+folderlist[d]+tmpname+"_RedArea.xls");  	
			}
		print(7);
		selectWindow("Log");
		saveAs("Text", resultdir+"Summary.xls");
		selectWindow("Log"); run("Close");
		selectWindow("Results"); run("Close");
		selectWindow("ROI Manager"); run("Close");
		culture = "reset";
		print(8);
		}
	waitForUser("Done!");
	}
//code for co-culture analysis starts here
if (culture == "Four channel co-culture")
	{
	channels = "Four";
	imagedir=getDirectory("Choose folder for flattened images");
	bluedir = getDirectory("Choose folder for unblinded blue/cerulean channels of the ROI");
	greendir = getDirectory("Choose folder for unblinded green channel of the ROI");
	reddir = getDirectory("Choose folder for unblinded red channel of the ROI");
	while (start == "Start")
		{
		open();
		StackToTiff();
		start = "ROI Selection";
		}
	blinddir1 = greendir;
	imageblind1=getDirectory("select folder to save a blinded green copy in");
	blinddir2 = reddir;
	imageblind2=getDirectory("select folder to save a blinded red copy in");
	ROIlist = getFileList(imagedir);
	while (start == "ROI Selection")
		{
		print("ROI,Area");
		for(i=0;i<ROIlist.length;i++)
			{
			open(imagedir+ROIlist[i]);
			ROIselect();
			}
		blindlist1 = getFileList(blinddir1);
		blindedlist1 = getFileList(imageblind1);
		print("Name,Blind");
		for(i=0;i<blindlist1.length;i++)
			{
			open(blinddir1+blindlist1[i]);
			blinding1();
			}
		waitForUser("Bring blind data over to an excel sheet - do not lose!");	
		blindlist2 = getFileList(blinddir2);
		blindedlist2 = getFileList(imageblind2);
		print("Name,Blind");
		for(i=0;i<blindlist2.length;i++)
			{
			open(blinddir2+blindlist2[i]);
			blinding2();
			}
		waitForUser("Bring blind data over to an excel sheet - do not lose!");	
		start = "Puncta";
		}
	punctadir1 = getDirectory("Choose folder to save puncta for green channel in");
	punctadir2 = getDirectory("Choose folder to save puncta for red channel in");
	while (start == "Puncta")
		{		
		blindedlist1 = getFileList(imageblind1);
		print("ROI,greenBlind");
		for(i=0;i<blindedlist1.length;i++)
			{
			open(imageblind1+blindedlist1[i]);
			PunctaCounter1();
			}
		blindedlist2 = getFileList(imageblind2);
		print("ROI,redblind");
		for(i=0;i<blindedlist2.length;i++)
			{
			open(imageblind2+blindedlist2[i]);
			PunctaCounter2();
			}
		start = "reset";
		}
	culture = "reset";
	waitForUser("Done!");
	}
if (culture == "Four channel neuron culture") 
	{
	print("not yet");
	}
	
//these are the functions referenced in the script
//each should be pretty self explanatory in the names

function StackToTiff()
	{
	Dialog.create("Channel Info");
		Dialog.addMessage("Please remember that if you're doing a \nflat RGB image with four colors, the cyan will \nsplit into the green and blue channels.");
		stacks = newArray("RGB Flat", "Separate Colors");
		Dialog.addChoice("Colors", stacks);
		filetype = newArray("Tiff", "Jpg");
		Dialog.addChoice("File Type", filetype);
	Dialog.show;
	stacks = Dialog.getChoice();
	filetype = Dialog.getChoice();
	for (i = nImages; i > 0; i--) {
		selectImage(i);
		title=getTitle();
		Dialog.create("Title");
			Dialog.addMessage("Rename");
			Dialog.addString("", title,50);
			Dialog.show();
		newTitle = Dialog.getString();
		rename(newTitle);
		title=getTitle();
		selectWindow(title);
		if (channels == "Four") {
			Stack.setChannel(1);
			run(channel1);
			Stack.setChannel(2);
			run(channel2);
			Stack.setChannel(3);
			run(channel3);
			Stack.setChannel(4);
			run(channel4);
			}
		else if (channels == "Three")
			{
			Stack.setChannel(1);
			run(channel1);
			Stack.setChannel(2);
			run(channel2);
			Stack.setChannel(3);
			run(channel3);
			}
		rename("close_me");
		run("Z Project...", "projection=[Max Intensity]");
		selectWindow("close_me");
		close();
		if (stacks == "RGB Flat"){
			selectWindow("MAX_close_me");
			run("Stack to RGB");
			saveAs(filetype, imagedir+title);
			close();
			selectWindow("MAX_close_me");
			close();
			}
		else {
			selectWindow("MAX_close_me");
			saveAs(filetype, imagedir+title);
			close();
			}
		}
	}
function DendriteSelect()
	{
	Dialog.create("Are there Usable dendrites?");
		Dialog.addString("","yes or no",30);
		Dialog.show();
	collect = Dialog.getString();	
	while (collect == "yes") {
		run("In [+]");
		run("In [+]");
		run("In [+]");
		//modify the name
		title=getTitle();
		Dialog.create("Title");
			Dialog.addMessage("Rename");
			Dialog.addString("",title,50);
		Dialog.show();
		newTitle = Dialog.getString();
		rename(newTitle);
		title=getTitle();
		selectWindow(title);
		//select dendrite
		setTool("polygon");
		waitForUser ("Select dendrite then hit OK");
		run("Copy");
		run("Internal Clipboard");
		setTool("polyline");
		waitForUser ("Measure dendrite length");
		run("Clear Results");
		run("Measure");
		length = getResult("Length",0);
		print(title+ "-1,"+length);	
		setTool("polygon");
		waitForUser ("Select dendrite then hit OK");
		run("Copy");
		run("Internal Clipboard");
		setTool("polyline");
		waitForUser ("Measure dendrite length");
		run("Clear Results");
		run("Measure");
		length = getResult("Length",0);
		print(title+ "-2,"+length);	
		selectWindow("Clipboard-1");
		saveAs("Tiff", rawdir+title+"-2");
		close();
		selectWindow("Clipboard");
		saveAs("Tiff", rawdir+title+"-1");
		close();
		selectWindow(title);
		close();
		collect = "reset";
		}
	close();
	}

function ROIselect()
	{
	title = getTitle();
	run("Channels Tool...");
	//enhances the cerulean channel to better see HEK areas
	Stack.setChannel(1);
	run("Enhance Contrast...", "saturated=0.1");
	waitForUser("Confirm live HEK");
	//creates a loop for multiple HEK in one image
	Dialog.create("Repeat?");
		Dialog.addMessage("Do you have another HEK in frame?");
		//if you answer "yes" in lowercase it will continue, if
		//anything else it will close the image and continue to the next one
		Dialog.addString("", "yes or no",40);
		Dialog.show();
	repeat = Dialog.getString();
	while (repeat == "yes") 
		{
		run("View 100%");
		title = getTitle();
		//this is the function, see the bottom of the macro
		copyChannels();
		Dialog.create("Repeat?");
			Dialog.addMessage("Do you have another HEK in frame?");
			Dialog.addString("", "yes or no",30);
			Dialog.show();
		repeat = Dialog.getString();
		}
	if(repeat != "yes") 
		{
		close();
		}
	}
	
function copyChannels()
	{
	run("Channels Tool...");
	//turns off all channels but channel 4
	Stack.setActiveChannels("1100");
	Stack.setChannel(4);
	setTool("polygon");
	run("In [+]");
	run("In [+]");
	run("In [+]");
	//modify the name
	title=getTitle();
	Dialog.create("Title");
		Dialog.addMessage("Rename for HEK ROI number");
		Dialog.addString("", title,50);
		Dialog.show();
	newTitle = Dialog.getString();
	rename(newTitle);
	title=getTitle();
	selectWindow(title);
	//select HEK ROI
	waitForUser ("Select HEK ROI then hit OK");
	run("Clear Results");
	run("Measure");
	measure1 = getResult("Area",0);
	print(title + "," + measure1);
	selectWindow(title);
	//green
	Stack.setChannel(3);
	run("Green");
	run("Copy");
	run("Internal Clipboard");
	selectWindow(title);
	//red
	Stack.setChannel(4);
	run("Red");
	run("Copy");
	run("Internal Clipboard");
	selectWindow(title);
	Stack.setChannel(2);
	//blue
	run("Blue");
	run("Copy");
	run("Internal Clipboard");
	selectWindow(title);
	Stack.setChannel(1);
	//cerulean
	run("Cyan");
	run("Copy");
	run("Internal Clipboard");
	selectWindow(title);
	selectWindow("Clipboard-3");
	saveAs("Tiff", bluedir+title+"_cerulean");
	close();
	selectWindow("Clipboard-2");
	saveAs("Tiff", bluedir+title+"_blue");
	close();
	selectWindow("Clipboard-1");
	saveAs("Tiff", reddir+title+"_red");
	close();
	selectWindow("Clipboard");
	saveAs("Tiff", greendir+title+"_green");
	close();
	selectWindow(title);
	run("View 100%");
	}

function blinding1()
	{
	title = getTitle();
	numbah = random();
	moNumbah = random();
	blind = (numbah^2)/moNumbah;
	blind1 = d2s(numbah,9);
	rename(blind1);
	run("Set Measurements...", "area perimeter area_fraction limit redirect=None decimal=9");
	saveAs("Tiff", imageblind1+blind);
	blind2 = getTitle();
	print(title + "," + blind2);
	selectImage(blind2);
	close();
	}

function blinding2()
	{
	title = getTitle();
	numbah = random();
	moNumbah = random();
	blind = (numbah^2)/moNumbah;
	blind1 = d2s(numbah,9);
	rename(blind1);
	run("Set Measurements...", "area perimeter area_fraction limit redirect=None decimal=9");
	saveAs("Tiff", imageblind2+blind);
	blind2 = getTitle();
	print(title + "," + blind2);
	selectImage(blind2);
	close();
	}

function PunctaCounter1()
	{
	title = getTitle();
	Dialog.create("Title");
		//rename the image to better categorize it
		Dialog.addMessage("Rename to get rid of .tif");
		Dialog.addString("", title,50);
		Dialog.show();
	newTitle = Dialog.getString();
	rename(newTitle);
	title=getTitle();
	selectWindow(title);
	//this is to make the puncta easier to see
	run("Grays");
	run("Invert");
	run("Point Tool...", "type=Circle color=Magenta size=Medium label=0 counter=0");
	setTool("multipoint");
	run("In [+]");
	run("In [+]");
	run("In [+]");
	waitForUser("Select Puncta then hit ok");
	run("Clear Results");
	run("Measure");
	if (nResults == 1)
		{
		result = nResults-1;
		}
	else 
		{
		result = nResults;
		}
	print(title + "," + result);
	selectImage(title);
	saveAs("Tiff", punctadir1+title+"_puncta");
	close();
}

function PunctaCounter2()
	{
	title = getTitle();
	Dialog.create("Title");
		//rename the image to better categorize it
		Dialog.addMessage("Rename to get rid of .tif");
		Dialog.addString("", title,50);
		Dialog.show();
	newTitle = Dialog.getString();
	rename(newTitle);
	title=getTitle();
	selectWindow(title);
	//this is to make the puncta easier to see
	run("Grays");
	run("Invert");
	run("Point Tool...", "type=Circle color=Magenta size=Medium label=0 counter=0");
	setTool("multipoint");
	run("In [+]");
	run("In [+]");
	run("In [+]");
	waitForUser("Select Puncta then hit ok");
	run("Clear Results");
	run("Measure");
	if (nResults == 1)
		{
		result = nResults-1;
		}
	else 
		{
		result = nResults;
		}
	print(title + "," + result);
	selectImage(title);
	saveAs("Tiff", punctadir2+title+"_puncta");
	close();
}
function SplitChannel() 
	{
	title = getTitle();
	run("Split Channels");
	selectImage(title+" (blue)");
	close();
	selectImage(title+" (green)");	
	run("In [+]");
	run("In [+]");
	run("In [+]");
	run("Invert");
	run("Threshold...");
	setAutoThreshold("Default");
	waitForUser("set and record threshold");
	selectImage(title+" (green)");
	close();
	selectImage(title+" (red)");
	run("In [+]");
	run("In [+]");
	run("In [+]");
	run("Invert");
	run("Threshold...");
	setAutoThreshold("Default");
	waitForUser("set and record threshold");
	selectImage(title+" (red)");
	close();
	}



function measure()
	{
	if( gcount > 0 ) 
		{
		roiManager("Open", resultdir+folderlist[d]+name+"_green_ROI.zip");
		selectImage("red mask");
		run("Clear Results");
		roiManager("Measure");
		grcount=0;
		}
	for(i=0;i<roiManager("Count");i++)
		{
		if( getResult("%Area",i) >= areapercent ) grcount++;
		roiManager("reset"); run("Clear Results");
		}
	if( rcount > 0 ) 
		{
		roiManager("Open", resultdir+folderlist[d]+name+"_red_ROI.zip");
		selectImage("green mask");
		run("Clear Results");
		roiManager("Measure");
		rgcount=0;
		}
	for(i=0;i<roiManager("Count");i++)
		{
		if( getResult("%Area",i) >= areapercent ) 
			{
			rgcount++;
			roiManager("reset"); run("Clear Results");
			//print(" 	GreenPuncta#	RedPuncta#	GR#	RG#	AxonLength(um)	Density_R(um/#)	Density_G(um/#)");
			print(filelist[f]+"	"+gcount+"	"+rcount+"	"+grcount+"	"+rgcount+"	"+axonlength+"	"+((rcount/axonlength)*10)+"	"+((gcount/axonlength)*10));
			}
		}
	run("Close All"); 
	}

function mask(channel)
	{
	selectImage(channel);
	run("Gaussian Blur...", "sigma=1");
	if( channel == "green")
		{
		setThreshold(greenThreshold, 255);
		}
	if( channel == "red")
		{
		setThreshold(redThreshold, 255);  
		}
      
	run("Find Maxima...", "noise=10 output=[Segmented Particles] above");
	run("Analyze Particles...", "size="+minsize+"-"+maxsize+" pixel show=Masks add");
	selectWindow("Mask of "+channel+" Segmented");  
	run("Grays");
	saveAs("Tiff", resultdir+folderlist[d]+name+"_"+channel+"_mask.tif");
	run("Clear Results");
	roiManager("Measure");
	selectWindow("Results");
  
	if( channel == "green")
		{
		for(j=0;j<nResults;j++)
		greenstring=greenstring+filelist[f]+"	"+j+1+"	"+getResult("Area",j)+"	"+getResult("Perim.",j)+" 	"+getResult("%Area",j)+"\n";
		}
    
	if( channel == "red")
		{
    	for(j=0;j<nResults;j++)
      	redstring=redstring+filelist[f]+"	"+j+1+"	"+getResult("Area",j)+"	"+getResult("Perim.",j)+"	"+getResult("%Area",j)+"\n";;
		}
	run("Clear Results");
	rename(channel+" mask");
	selectImage(channel); close();
	selectImage(channel+" Segmented"); close();

	if( channel == "green" )  
		{
		gcount = roiManager("Count");
		}
	if( channel == "red" )  
		{
		rcount = roiManager("Count");
		}
  	if( roiManager("Count") > 0 )
  		{
		roiManager("Save", resultdir+folderlist[d]+name+"_"+channel+"_ROI.zip");
		roiManager("reset");
 		}
}
function axon()
	{
	selectImage("axon");
	run("Subtract Background...", "rolling=10");
	run("Gaussian Blur...", "sigma=3");
	setAutoThreshold("Triangle dark");
	setOption("BlackBackground", true);
	run("Convert to Mask");
	run("Skeletonize");
	run("Analyze Particles...", "size=25-infinity pixel show=Nothing add");
	axonlength=0;
	if( roiManager("Count") > 0 )
		{
		roiManager("Save", resultdir+folderlist[d]+name+"_axon.zip");
		run("Clear Results");
		roiManager("Measure");
		for(i=0; i< roiManager("Count"); i++)
			{
			axonlength= axonlength + getResult("Perim.",0) ;
			axonlength = axonlength/2;
			open(rawdir+folderlist[d]+filelist[f]);
			roiManager("Show All");
			run("Flatten");
			tmp= substring(folderlist[d], 0 , lengthOf(folderlist[d])-1 );
			saveAs("Jpeg", axondir+tmp+"_"+name+"_show.jpg");
			close(); close();
			}

		roiManager("reset"); 
		run("Clear Results");
		}

function initialize()
	{
	open(rawdir+folderlist[d]+filelist[f]);
	name=getInfo("image.filename");
	run("Properties...", "channels=1 slices=1 frames=1 unit=um pixel_width="+scale+" pixel_height=0.1705 voxel_depth=1");
	run("Split Channels");
	rename("axon");
	selectImage(name+" (green)"); rename("green");
	selectImage(name+" (red)"); rename("red");
	}
 	

function parameterinput()
	{
	Dialog.create("Parameter");
		Dialog.addNumber("Green Threshold:", 30);
		Dialog.addNumber("Red Threshold:", 30);
		Dialog.addNumber("Area Percent (%):", 25);
		Dialog.addNumber("Pixel Scale (um/pixel):", 0.1705);
		Dialog.addNumber("Min Punta Size (pixel):", 1);
		Dialog.addNumber("Max Punta Size (pixel):", 60);
	Dialog.show();
	greenThreshold = Dialog.getNumber();
	redThreshold = Dialog.getNumber();
	areapercent = Dialog.getNumber();  
	scale = Dialog.getNumber();  
	minsize = Dialog.getNumber();  
	maxsize = Dialog.getNumber();  
	}
